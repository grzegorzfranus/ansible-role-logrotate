---
# =============================================================================
# Ansible Role: Chrony - Variable Assertions
# =============================================================================
# This file contains assertions to validate all variables used in the role.
# Each assertion ensures that variables are defined and have correct types/values.
# These validations help prevent configuration errors and ensure secure defaults.
#
# Flow:
# 1. General Settings Assertions
# 2. Logrotate Settings Assertions
# 3. NTP Server Settings Assertions
# 4. Package and Service Settings Assertions
# 5. File Path and Permission Assertions
# 6. Advanced Tuning Assertions
# =============================================================================

# -----------------------------------------------------------------------------
# 1. General Settings Assertions
# -----------------------------------------------------------------------------
- name: üß™ Chrony | assert | Validate role action parameter
  ansible.builtin.assert:
    that:
      - chrony_role_action is defined
      - chrony_role_action is string
      - chrony_role_action in ["all", "prerequisites", "install", "configure", "logrotate", "upgrade"]
    fail_msg: "‚ùå Invalid role action '{{ chrony_role_action | default('undefined') }}'. Must be one of: all, prerequisites, install, configure, logrotate, upgrade"
    success_msg: "‚úÖ Role action parameter is valid: {{ chrony_role_action }}"

- name: üß™ Chrony | assert | Validate service enabled parameter
  ansible.builtin.assert:
    that:
      - chrony_service_enabled is defined
      - chrony_service_enabled is boolean
    fail_msg: "‚ùå Invalid service enabled setting '{{ chrony_service_enabled | default('undefined') }}'. Must be boolean (true/false)"
    success_msg: "‚úÖ Service enabled parameter is valid: {{ chrony_service_enabled }}"

- name: üß™ Chrony | assert | Validate logrotate configuration flag
  ansible.builtin.assert:
    that:
      - chrony_configure_logrotate is defined
      - chrony_configure_logrotate is boolean
    fail_msg: "‚ùå Invalid logrotate configuration '{{ chrony_configure_logrotate | default('undefined') }}'. Must be boolean (true/false)"
    success_msg: "‚úÖ Logrotate configuration flag is valid: {{ chrony_configure_logrotate }}"

- name: üß™ Chrony | assert | Validate test execution flag
  ansible.builtin.assert:
    that:
      - chrony_run_test is defined
      - chrony_run_test is boolean
    fail_msg: "‚ùå Invalid test execution flag '{{ chrony_run_test | default('undefined') }}'. Must be boolean (true/false)"
    success_msg: "‚úÖ Test execution flag is valid: {{ chrony_run_test }}"

# -----------------------------------------------------------------------------
# 2. Logrotate Settings Assertions
# -----------------------------------------------------------------------------
- name: üß™ Chrony | assert | Validate logrotate options
  ansible.builtin.assert:
    that:
      - chrony_logrotate_options is defined
      - chrony_logrotate_options is mapping
      - chrony_logrotate_options.archive_directory_path is defined
      - chrony_logrotate_options.frequency is defined
      - chrony_logrotate_options.frequency in ["hourly", "daily", "weekly", "monthly"]
      - chrony_logrotate_options.count is defined
      - chrony_logrotate_options.count is number
      - chrony_logrotate_options.count > 0
      - chrony_logrotate_options.missingok is defined
      - chrony_logrotate_options.missingok is boolean
      - chrony_logrotate_options.compress is defined
      - chrony_logrotate_options.compress is boolean
      - chrony_logrotate_options.nocreate is defined
      - chrony_logrotate_options.nocreate is boolean
      - chrony_logrotate_options.copytruncate is defined
      - chrony_logrotate_options.copytruncate is boolean
      - chrony_logrotate_options.dateext is defined
      - chrony_logrotate_options.dateext is boolean
    fail_msg: "‚ùå Invalid logrotate options configuration. Must be a valid mapping with all required fields"
    success_msg: "‚úÖ Logrotate options are valid with {{ chrony_logrotate_options.frequency }} frequency"
  when: >
    chrony_configure_logrotate | default(false)

# -----------------------------------------------------------------------------
# 3. NTP Server Settings Assertions
# -----------------------------------------------------------------------------
- name: üß™ Chrony | assert | Validate NTP source mode
  ansible.builtin.assert:
    that:
      - chrony_ntp_source_mode is defined
      - chrony_ntp_source_mode is string
      - chrony_ntp_source_mode in ["pool", "server"]
    fail_msg: "‚ùå Invalid NTP source mode '{{ chrony_ntp_source_mode | default('undefined') }}'. Must be 'pool' or 'server'"
    success_msg: "‚úÖ NTP source mode is valid: {{ chrony_ntp_source_mode }}"

- name: üß™ Chrony | assert | Validate NTP server list
  ansible.builtin.assert:
    that:
      - chrony_ntp_servers is defined
      - chrony_ntp_servers | length > 0
    fail_msg: "‚ùå NTP server list is empty or undefined. Must provide at least one NTP server"
    success_msg: "‚úÖ NTP server list is valid with {{ chrony_ntp_servers | length }} servers"

- name: üß™ Chrony | assert | Validate real-time clock sync setting
  ansible.builtin.assert:
    that:
      - chrony_rtcsync_enable is defined
      - chrony_rtcsync_enable is boolean
    fail_msg: "‚ùå Invalid RTC sync setting '{{ chrony_rtcsync_enable | default('undefined') }}'. Must be boolean (true/false)"
    success_msg: "‚úÖ Real-time clock sync setting is valid: {{ chrony_rtcsync_enable }}"

- name: üß™ Chrony | assert | Validate maximum distance threshold
  ansible.builtin.assert:
    that:
      - chrony_maxdistance is defined
      - chrony_maxdistance is number
      - chrony_maxdistance > 0
      - chrony_maxdistance <= 16.0
    fail_msg: "‚ùå Invalid max distance '{{ chrony_maxdistance | default('undefined') }}'. Must be between 0 and 16.0 seconds"
    success_msg: "‚úÖ Maximum distance threshold is valid: {{ chrony_maxdistance }} seconds"

- name: üß™ Chrony | assert | Validate NTS dump directory
  ansible.builtin.assert:
    that:
      - chrony_ntsdumpdir is defined
      - chrony_ntsdumpdir is string
      - chrony_ntsdumpdir | length > 0
      - chrony_ntsdumpdir is search('^/')
    fail_msg: "‚ùå Invalid NTS dump directory '{{ chrony_ntsdumpdir | default('undefined') }}'. Must be a non-empty absolute path"
    success_msg: "‚úÖ NTS dump directory is valid: {{ chrony_ntsdumpdir }}"

- name: üß™ Chrony | assert | Validate minimum sources setting
  ansible.builtin.assert:
    that:
      - chrony_num_minsources is defined
      - chrony_num_minsources is number
      - chrony_num_minsources > 0
      - chrony_num_minsources <= 10
    fail_msg: "‚ùå Invalid minimum sources setting '{{ chrony_num_minsources | default('undefined') }}'. Must be between 1 and 10"
    success_msg: "‚úÖ Minimum sources setting is valid: {{ chrony_num_minsources }}"

- name: üß™ Chrony | assert | Validate maximum update skew
  ansible.builtin.assert:
    that:
      - chrony_maxupdateskew is defined
      - chrony_maxupdateskew is number
      - chrony_maxupdateskew > 0
      - chrony_maxupdateskew <= 1000.0
    fail_msg: "‚ùå Invalid max update skew '{{ chrony_maxupdateskew | default('undefined') }}'. Must be between 0 and 1000.0 ppm"
    success_msg: "‚úÖ Maximum update skew is valid: {{ chrony_maxupdateskew }} ppm"

- name: üß™ Chrony | assert | Validate step threshold configuration
  ansible.builtin.assert:
    that:
      - chrony_makestep is defined
      - chrony_makestep is string
      - chrony_makestep is search('^[0-9]+\\.[0-9]+ [0-9]+$')
    fail_msg: "‚ùå Invalid step threshold '{{ chrony_makestep | default('undefined') }}'. Must be in format 'threshold limit' (e.g., '1.0 3')"
    success_msg: "‚úÖ Step threshold configuration is valid: {{ chrony_makestep }}"

- name: üß™ Chrony | assert | Validate log change threshold
  ansible.builtin.assert:
    that:
      - chrony_logchange is defined
      - chrony_logchange is string
    fail_msg: "‚ùå Invalid log change threshold '{{ chrony_logchange | default('undefined') }}'. Must be a string value"
    success_msg: "‚úÖ Log change threshold is valid: {{ chrony_logchange }}"

# -----------------------------------------------------------------------------
# 4. Package and Service Settings Assertions
# -----------------------------------------------------------------------------
- name: üß™ Chrony | assert | Validate package name
  ansible.builtin.assert:
    that:
      - chrony_package_name is defined
      - chrony_package_name is string
      - chrony_package_name | length > 0
      - chrony_package_name is search('^[a-z0-9-]+$')
    fail_msg: "‚ùå Invalid package name '{{ chrony_package_name | default('undefined') }}'. Must contain only lowercase letters, numbers, and hyphens"
    success_msg: "‚úÖ Package name is valid: {{ chrony_package_name }}"

- name: üß™ Chrony | assert | Validate service name
  ansible.builtin.assert:
    that:
      - chrony_service_name is defined
      - chrony_service_name is string
      - chrony_service_name | length > 0
      - chrony_service_name is search('^[a-z0-9-]+$')
    fail_msg: "‚ùå Invalid service name '{{ chrony_service_name | default('undefined') }}'. Must contain only lowercase letters, numbers, and hyphens"
    success_msg: "‚úÖ Service name is valid: {{ chrony_service_name }}"

- name: üß™ Chrony | assert | Validate NTP service name
  ansible.builtin.assert:
    that:
      - chrony_ntp_service_name is defined
      - chrony_ntp_service_name is string
      - chrony_ntp_service_name | length > 0
      - chrony_ntp_service_name is search('^[a-z0-9-]+$')
    fail_msg: "‚ùå Invalid NTP service name '{{ chrony_ntp_service_name | default('undefined') }}'. Must contain only lowercase letters, numbers, and hyphens"
    success_msg: "‚úÖ NTP service name is valid: {{ chrony_ntp_service_name }}"

- name: üß™ Chrony | assert | Validate systemd-timesyncd service name
  ansible.builtin.assert:
    that:
      - chrony_systemd_timesyncd_service_name is defined
      - chrony_systemd_timesyncd_service_name is string
      - chrony_systemd_timesyncd_service_name | length > 0
      - chrony_systemd_timesyncd_service_name is search('^[a-z0-9-]+$')
    fail_msg: "‚ùå Invalid systemd-timesyncd service name '{{ chrony_systemd_timesyncd_service_name | default('undefined') }}'. Must contain only lowercase letters, numbers, and hyphens"
    success_msg: "‚úÖ Systemd-timesyncd service name is valid: {{ chrony_systemd_timesyncd_service_name }}"

# -----------------------------------------------------------------------------
# 5. File Path and Permission Assertions
# -----------------------------------------------------------------------------
- name: üß™ Chrony | assert | Validate configuration file path
  ansible.builtin.assert:
    that:
      - chrony_config_path is defined
      - chrony_config_path is string
      - chrony_config_path | length > 0
      - chrony_config_path is search('^/')
    fail_msg: "‚ùå Invalid config path '{{ chrony_config_path | default('undefined') }}'. Must be an absolute path"
    success_msg: "‚úÖ Configuration file path is valid: {{ chrony_config_path }}"

- name: üß™ Chrony | assert | Validate log directory owner
  ansible.builtin.assert:
    that:
      - chrony_log_directory_user is defined
      - chrony_log_directory_user is string
      - chrony_log_directory_user | length > 0
      - chrony_log_directory_user is search('^[a-z0-9_-]+$')
    fail_msg: "‚ùå Invalid log directory owner '{{ chrony_log_directory_user | default('undefined') }}'. Must contain only lowercase letters, numbers, underscores, and hyphens"
    success_msg: "‚úÖ Log directory owner is valid: {{ chrony_log_directory_user }}"

- name: üß™ Chrony | assert | Validate drift file path
  ansible.builtin.assert:
    that:
      - chrony_driftfile_path is defined
      - chrony_driftfile_path is string
      - chrony_driftfile_path | length > 0
      - chrony_driftfile_path is search('^/')
    fail_msg: "‚ùå Invalid drift file path '{{ chrony_driftfile_path | default('undefined') }}'. Must be a non-empty absolute path"
    success_msg: "‚úÖ Drift file path is valid: {{ chrony_driftfile_path }}"

- name: üß™ Chrony | assert | Validate key file path
  ansible.builtin.assert:
    that:
      - chrony_keyfile_path is defined
      - chrony_keyfile_path is string
      - chrony_keyfile_path | length > 0
      - chrony_keyfile_path is search('^/')
    fail_msg: "‚ùå Invalid key file path '{{ chrony_keyfile_path | default('undefined') }}'. Must be a non-empty absolute path"
    success_msg: "‚úÖ Key file path is valid: {{ chrony_keyfile_path }}"

- name: üß™ Chrony | assert | Validate logrotate configuration path
  ansible.builtin.assert:
    that:
      - chrony_logrotate_config_path is defined
      - chrony_logrotate_config_path is string
      - chrony_logrotate_config_path | length > 0
      - chrony_logrotate_config_path is search('^/')
    fail_msg: "‚ùå Invalid logrotate config path '{{ chrony_logrotate_config_path | default('undefined') }}'. Must be a non-empty absolute path"
    success_msg: "‚úÖ Logrotate configuration path is valid: {{ chrony_logrotate_config_path }}"

# -----------------------------------------------------------------------------
# 6. Advanced Tuning Assertions
# -----------------------------------------------------------------------------
- name: üß™ Chrony | assert | Validate hardware settings
  ansible.builtin.assert:
    that:
      - chrony_hardware_settings is defined
      - chrony_hardware_settings is mapping
      - chrony_hardware_settings.enable_hw_timestamp is defined
      - chrony_hardware_settings.enable_hw_timestamp is boolean
      - chrony_hardware_settings.hw_timestamp_interfaces is defined
      - chrony_hardware_settings.hw_timestamp_interfaces is string
      - chrony_hardware_settings.refclock_enable is defined
      - chrony_hardware_settings.refclock_enable is boolean
      - chrony_hardware_settings.refclock_pps is defined
      - chrony_hardware_settings.refclock_pps is string
      - chrony_hardware_settings.refclock_precision is defined
      - chrony_hardware_settings.refclock_precision is string
      - chrony_hardware_settings.rtcautotrim is defined
      - chrony_hardware_settings.rtcautotrim is number
    fail_msg: "‚ùå Invalid hardware settings configuration. Must be a mapping with all required fields"
    success_msg: "‚úÖ Hardware settings are valid with HW timestamp: {{ chrony_hardware_settings.enable_hw_timestamp }}"

- name: üß™ Chrony | assert | Validate system settings
  ansible.builtin.assert:
    that:
      - chrony_system_settings is defined
      - chrony_system_settings is mapping
      - chrony_system_settings.dumpdir is defined
      - chrony_system_settings.dumpdir is string
    fail_msg: "‚ùå Invalid system settings configuration. Must be a mapping with all required fields"
    success_msg: "‚úÖ System settings are valid with dump directory: {{ chrony_system_settings.dumpdir }}"

- name: üß™ Chrony | assert | Validate temperature compensation settings
  ansible.builtin.assert:
    that:
      - chrony_temp_compensation is defined
      - chrony_temp_compensation is mapping
      - chrony_temp_compensation.enable is defined
      - chrony_temp_compensation.enable is boolean
      - chrony_temp_compensation.sensor_file is defined
      - chrony_temp_compensation.sensor_file is string
      - chrony_temp_compensation.update_interval is defined
      - chrony_temp_compensation.update_interval is number
      - chrony_temp_compensation.config_file is defined
      - chrony_temp_compensation.config_file is string
    fail_msg: "‚ùå Invalid temperature compensation settings. Must be a mapping with all required fields"
    success_msg: "‚úÖ Temperature compensation settings are valid with enable: {{ chrony_temp_compensation.enable }}"

- name: üß™ Chrony | assert | Validate client settings
  ansible.builtin.assert:
    that:
      - chrony_client_settings is defined
      - chrony_client_settings is mapping
      - chrony_client_settings.use_dhcp is defined
      - chrony_client_settings.use_dhcp is boolean
      - chrony_client_settings.dhcp_sourcedir is defined
      - chrony_client_settings.dhcp_sourcedir is string
      - chrony_client_settings.conf_dir is defined
      - chrony_client_settings.conf_dir is string
      - chrony_client_settings.initstepslew is defined
      - chrony_client_settings.initstepslew is mapping
      - chrony_client_settings.initstepslew.threshold is defined
      - chrony_client_settings.initstepslew.threshold is number
      - chrony_client_settings.initstepslew.enable is defined
      - chrony_client_settings.initstepslew.enable is boolean
    fail_msg: "‚ùå Invalid client settings configuration. Must be a mapping with all required fields"
    success_msg: "‚úÖ Client settings are valid with DHCP usage: {{ chrony_client_settings.use_dhcp }}"

- name: üß™ Chrony | assert | Validate authentication settings
  ansible.builtin.assert:
    that:
      - chrony_auth_settings is defined
      - chrony_auth_settings is mapping
      - chrony_auth_settings.enable is defined
      - chrony_auth_settings.enable is boolean
      - chrony_auth_settings.selectmode is defined
      - chrony_auth_settings.selectmode in ['require', 'prefer', 'ignore']
    fail_msg: "‚ùå Invalid authentication settings. Must be a mapping with enable (bool) and selectmode (require/prefer/ignore)"
    success_msg: "‚úÖ Authentication settings are valid with selectmode: {{ chrony_auth_settings.selectmode }}"

- name: üß™ Chrony | assert | Validate leap second settings
  ansible.builtin.assert:
    that:
      - chrony_leapsec_settings is defined
      - chrony_leapsec_settings is mapping
      - chrony_leapsec_settings.mode is defined
      - chrony_leapsec_settings.mode is string
      - chrony_leapsec_settings.maxslewrate is defined
      - chrony_leapsec_settings.maxslewrate is number
      - chrony_leapsec_settings.smoothtime is defined
      - chrony_leapsec_settings.smoothtime is string
    fail_msg: "‚ùå Invalid leap second settings configuration. Must be a mapping with all required fields"
    success_msg: "‚úÖ Leap second settings are valid with mode: {{ chrony_leapsec_settings.mode }}"
